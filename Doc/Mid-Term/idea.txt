Assumption：
1. 从可信计算 度量根 
我们假设，安装一个新的操作系统（包含我们的代码的）并且启动的时候，里面的所有文件都是安全的，这些文件被称为syxyyds文件。
此时所有文件都不具有security.kylin的属性。
而用户开始使用之后新添加的文件和修改过的文件都是危险的。需要添加security.kylin属性进行控制
2. 攻击者能力的上界，无root权限、不能操作硬件
3. 不考虑使用漏洞运行的过程



基于security.kylin的安全机制（下文可以想象成一个有向图）：
Node 1 不具有security.kylin 代表不可能作为执行文件具有威胁的文件（比如syxyyds文件，空文件等）
Node 2 unknown 此文件可能具有威胁 
Node 3 verifity  此文件可能具有威胁，但被信任

1->2  空文件被写入内容（注意创建一个空文件是不会添加属性的），原本信任的文件被修改
3->2 被修改，被移动，进行危险操作(比如尝试利用漏洞？？？？？？？？？？？？？？？？？？？？？？)
除此之外的转化方式都只能通过root权限下执行chkylinxattr程序实现








第一问
syx 无敌 
syx yyds



第二问
# define 脚本 用解释性语言编成的脚本
我们研究的不多，如果你有好的想法，就按照你的想法去写就好了。
我们的想法是当python/sh被运行的时候，LSM钩子发现。并且运行一个守护进程，这个进程会监视python的运行，并且当进行例如读取其他可执行文件/建立新的进程

但是我们设想了几种可能的情况可能需要特殊处理
1. 脚本在执行过程中，调用了另一个脚本(两个脚本的语言不一定相同)，此时如何判断是否需要阻止。
2. 脚本执行过程中fork/create_thread了，此时守护进程如何操作，是不是也需要fork/create_thread
3. 忘了
？？？？？？？

第三问
目前我们还在研究复杂命令执行的机制。
我们在钩子中还有SELinux的一些其他地方设置了输出，以跟踪可能的运行过程，现在正在测试在哪些地方添加安全机制可以实现防止复杂命令的功能。
目前发现LSM并不能完全钩住所有的复杂指令，有一些通过奇怪的机制绕过了LSM的检测，具体原因还在调查中。

